{"version":3,"sources":["CardList.tsx","Scroll.tsx","FocusView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Scroll","children","style","overflow","numbers","i","push","CardList","cardClicked","headerBarHeight","useState","containerHeight","setContainerHeight","useEffect","window","innerHeight","className","height","map","n","key","onClick","alt","src","FocusView","pokemon","name","id","types","t","stats","s","value","Stat","this","Pokemon","pokeTypes","pokeStats","type","stat","base_stat","App","initialQuery","url","activePokemon","setActivePokemon","query","setQuery","a","async","fetch","response","json","data","console","log","fetchData","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2e2fb02.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\ninterface CardListProps {\n    cardClicked: (id: number) => void;\n    headerBarHeight: number\n}\n\n// Create an array for the first 150 pokemon\nconst numbers: Array<number> = [];\nfor(let i = 1; i < 151; i++) {\n    numbers.push(i);\n}\n\nconst CardList: React.FC<CardListProps> = ({cardClicked, headerBarHeight}) => {\n\n    const [containerHeight, setContainerHeight] = useState(800);\n\n    useEffect(() => {\n        setContainerHeight(window.innerHeight - headerBarHeight )\n    },);\n\n    return (\n        <div className=\"flex flex-column\" style={{height: `${containerHeight}px`}}>\n            {numbers.map(n => {\n                return (\n                    <div key={`id--${n}`} className=\"w-90 pa3 mt1 mb1 shadow-4 br4 bg-near-white\" onClick={() => cardClicked(n)}>\n                        <img alt={`sprite of pokemon ${n}`} src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${n}.png`}/>\n                    </div>\n                )\n            })}\n        </div>\n    )\n};\n\nexport default CardList;\n","import React from 'react';\n\ntype ScrollProps = {\n  children?: JSX.Element\n}\n\nconst Scroll: React.FC<ScrollProps> = ({children}) => {\n\n  return (\n    <div style={{ overflow: 'scroll'}}>\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\nimport { Pokemon } from './App';\n\ninterface FocusViewProps {\n    pokemon: Pokemon\n}\n\nconst FocusView: React.FC<FocusViewProps> = ({pokemon}) => {\n    return (\n        <div className=\"flex flex-column bg-white br4 pa4\">\n            <div>\n                <img alt={`sprite of ${pokemon.name}`} src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`}/>\n            </div>\n\n            <div>\n                <h1>{pokemon.name}</h1>\n            </div>\n\n            <div>\n                <h2>Types</h2>\n                    {pokemon.types.map(t => {\n                        return (<div key={`id--type--${pokemon.name}-${t}`}>{t}</div>)\n                    })}\n\n            </div>\n\n            <div>\n                <h2>Stats</h2>\n                {pokemon.stats.map(s => {\n                    return (\n                        <div key={`id--stat--${pokemon.name}-${s.name}`}>{s.name} : {s.value}</div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n};\n\nexport default FocusView;\n","import React, { useState, useEffect } from 'react';\nimport Scroll from './Scroll';\nimport CardList from './CardList';\nimport FocusView from './FocusView';\nimport './App.css';\n\ninterface pokeTypeInfo {\n    slow: number\n    type: { name: string}\n}\n\ninterface pokeStatInfo {\n    base_stat: number\n    stat: { name: string; url: string }\n}\n\nclass Stat {\n    value: number;\n    name: string;\n    constructor(name: string, value: number) {\n        this.name  = name;\n        this.value = value;\n    }\n}\n\nexport class Pokemon {\n  id: number;\n  name: string;\n  types: Array<string>;\n  stats: Array<Stat>;\n  constructor(id: number, name: string, pokeTypes: Array<pokeTypeInfo>, pokeStats: Array<pokeStatInfo>) {\n    this.id    = id;\n    this.name  = name;\n    this.types = pokeTypes.map(t => t.type?.name);\n    this.stats = pokeStats.map(s => {\n        return new Stat(s.stat?.name, s.base_stat)\n    });\n  }\n}\n\ninterface AppProps {\n  initialQuery: number\n}\n\nconst headerBarHeight:number = 100;\n\nconst App: React.FC<AppProps> = ({initialQuery}) => {\n\n  const [activePokemon, setActivePokemon] =\n      useState(new Pokemon(-1, '', [],\n          [{base_stat: -1, stat: { name: '', url: '' }}]\n      ));\n  const [query, setQuery] = useState(initialQuery);\n\n  useEffect(() => {\n    async function fetchData() {\n      let url = `https://pokeapi.co/api/v2/pokemon/${query}`;\n      const response = await fetch(url);\n      const data     = await response.json();\n      console.log({data});\n      const pokemon  = new Pokemon(data.id, data.name, data.types, data.stats);\n      setActivePokemon(pokemon);\n    }\n\n    fetchData()\n  },[query]);\n\n\n  const cardClicked = (id: number) => {\n    // setting state will cause app to render which will cause the effect to be run\n    setQuery(id)\n  };\n\n  return (\n    <div className=\"tc\">\n        <div className=\"bg-red f1 pt1 rotate white\" style={{height: `${headerBarHeight}px`}}>\n            <code>Pok√©dex</code>\n        </div>\n\n        <div>\n            <div className=\"fl w-third pa2 bg-black-70\">\n                <Scroll>\n                    <CardList cardClicked={cardClicked} headerBarHeight={headerBarHeight}/>\n                </Scroll>\n            </div>\n            <div className=\"fl w-two-thirds pa2 bg-black-40\">\n              <FocusView pokemon={activePokemon}/>\n            </div>\n        </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(<App initialQuery={1} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}