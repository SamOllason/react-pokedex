{"version":3,"sources":["CardList.tsx","FocusView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["numbers","console","log","CardList","cardClicked","className","map","n","onClick","alt","src","FocusView","pokemon","name","id","Pokemon","this","App","initialQuery","useState","activePokemon","setActivePokemon","query","setQuery","useEffect","a","async","url","fetch","response","json","data","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAMMA,EAAyB,CAAE,EAAG,EAAG,EAAG,EAAG,GAC7CC,QAAQC,IAAI,CAACF,YAEb,IAuCeG,EAvC2B,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACxC,OACI,yBAAKC,UAAU,oBACVL,EAAQM,KAAI,SAAAC,GACT,OACI,oCACI,yBAAKF,UAAU,uBAAuBG,QAAS,kBAAMJ,EAAYG,KAC7D,yBAAKE,IAAI,QAAQC,IAAG,mFAA8EH,EAA9E,iBCAjCI,EAT6B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC1C,OACI,oCACKA,EAAQC,KACT,yBAAKJ,IAAI,QAAQC,IAAG,mFAA8EE,EAAQE,GAAtF,YCDnBC,G,MAGX,WAAYD,EAAYD,GAAe,yBAFvCC,QAEsC,OADtCD,UACsC,EACpCG,KAAKF,GAAKA,EACVE,KAAKH,KAAOA,IA8CDI,EAtCiB,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EAERC,mBAAS,IAAIJ,EAAQG,EAAc,cAF3B,mBAE3CE,EAF2C,KAE5BC,EAF4B,OAGxBF,mBAASD,GAHe,mBAG3CI,EAH2C,KAGpCC,EAHoC,KAKlDC,qBAAU,YACR,yBAAAC,EAAAC,OAAA,uDACMC,EADN,4CACiDL,GADjD,WAAAG,EAAA,MAEyBG,MAAMD,IAF/B,cAEQE,EAFR,kBAAAJ,EAAA,MAGyBI,EAASC,QAHlC,OAGQC,EAHR,OAIQnB,EAAW,IAAIG,EAAQgB,EAAKjB,GAAIiB,EAAKlB,MAC3CQ,EAAiBT,GALnB,qCAQAoB,KACA,CAACV,IAQH,OACE,yBAAKjB,UAAU,MACb,uCACA,6BACE,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CAAUD,YAVE,SAACU,GAEnBS,EAAST,OAUL,yBAAKT,UAAU,kBACb,kBAAC,EAAD,CAAWO,QAASQ,QC1CVa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,CAAKrB,aAAc,IAAOsB,SAASC,eAAe,SDoI5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.95774208.chunk.js","sourcesContent":["import React from 'react';\n\ninterface CardListProps {\n    cardClicked: (id: number) => void;\n}\n\nconst numbers: Array<number> = [ 1, 2, 3, 4, 5];\nconsole.log({numbers});\n\nconst CardList: React.FC<CardListProps> = ({cardClicked}) => {\n    return (\n        <div className=\"flex flex-column\">\n            {numbers.map(n => {\n                return (\n                    <>\n                        <div className=\"outline w-25 pa3 mr2\" onClick={() => cardClicked(n)}>\n                            <img alt=\"ditto\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${n}.png`}/>\n                        </div>\n                    </>\n                )\n            })}\n        </div>\n    )\n};\n\n        // {/*<>*/}\n        // {/*    {numbers.map(n => {*/}\n        //\n        // {/*            return ( <div>*/}\n        // {/*                    /!*<img alt=\"ditto\"*!/*/}\n        // {/*                    /!*     src={`https://raw.githubusercontent.com/*!/*/}\n        // {/*                    /!*     PokeAPI/sprites/master/sprites/pokemon/back/${n}.png`}*!/*/}\n        // {/*                    /!*/>*!/*/}\n        //\n        // {/*                    <div className=\"flex flex-column\">*/}\n        // {/*                        <div className=\"outline w-25 pa3 mr2\">*/}\n        // {/*                            <code>n</code>*/}\n        // {/*                        </div>*/}\n        // {/*                    </div>*/}\n        // {/*                </div>*/}\n        // {/*            )*/}\n        // {/*        }*/}\n        // {/*    )}*/}\n        // {/*</>*/}\n    // )\n\n\n\nexport default CardList;\n","import React from 'react';\nimport { Pokemon } from './App';\n\ninterface FocusViewProps {\n    pokemon: Pokemon\n}\n\nconst FocusView: React.FC<FocusViewProps> = ({pokemon}) => {\n    return (\n        <>\n            {pokemon.name}\n            <img alt=\"ditto\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`}/>\n        </>\n    )\n};\n\nexport default FocusView;\n","import React, { useState, useEffect } from 'react';\nimport CardList from './CardList';\nimport FocusView from './FocusView';\nimport './App.css';\n\nexport interface pokemonInfo {\n  name: string,\n  num: number\n}\n\nexport class Pokemon {\n  id: number;\n  name: string;\n  constructor(id: number, name: string) {\n    this.id = id;\n    this.name = name\n  }\n}\n\ninterface AppProps {\n  initialQuery: number\n}\n\nconst App: React.FC<AppProps> = ({initialQuery}) => {\n\n  const [activePokemon, setActivePokemon] = useState(new Pokemon(initialQuery, 'Bulbasaur'));\n  const [query, setQuery] = useState(initialQuery);\n\n  useEffect(() => {\n    async function fetchData() {\n      let url = `https://pokeapi.co/api/v2/pokemon/${query}`;\n      const response = await fetch(url);\n      const data     = await response.json();\n      const pokemon  = new Pokemon(data.id, data.name);\n      setActivePokemon(pokemon);\n    }\n\n    fetchData()\n  },[query]);\n\n\n  const cardClicked = (id: number) => {\n    // setting state will cause app to render which will cause the effect to be run\n    setQuery(id)\n  };\n\n  return (\n    <div className=\"tc\">\n      <p>Pokdedex</p>\n      <div>\n        <div className=\"fl w-two-thirds pa2\">\n          <CardList cardClicked={cardClicked}/>\n        </div>\n        <div className=\"fl w-third pa2\">\n          <FocusView pokemon={activePokemon}/>\n        </div>\n        </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(<App initialQuery={1} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}